require 'yaml'
require 'spaceship'

APP_ID = "net.artsy.artsy"

lane :ship_beta do
  setup_for_app_store
  verify_pod_keys

  readme_yaml = File.read("../CHANGELOG.yml")
  readme_data = YAML.load(readme_yaml)

  latest_version = readme_data["upcoming"]["version"]

  Spaceship::Tunes.login(ENV["FASTLANE_USERNAME"], ENV["FASTLANE_PASSWORD"])
  app = Spaceship::Tunes::Application.find("net.artsy.artsy")

  # Fail early if we need to make a new version on iTunes
  if app.latest_version.version != latest_version
    raise "You need to create an app version for #{latest_version} in iTunes before deploying"
  end

  upcoming = readme_data["upcoming"]
  commit = `git log -n1 --format='%h'`.strip
  beta_readme = "## #{upcoming["version"]} - #{commit} \n\n - #{upcoming["user_facing"].join "\n - "} \n\n"

  # Make sure the stickers app is up to date in it's plist
  `/usr/libexec/PlistBuddy -c "Set CFBundleVersion #{latest_version}" Artsy\ Stickers/Info.plist`

  # Builds the app
  gym

  # Find out how many builds we've sent for this version
  # if it's zero, it will raise an exception
  build_version = 0
  begin
    train = app.build_trains[latest_version]
    build_version = train.builds.count + 1
  rescue
  end

  # Do a tag, we use a http git remote so we can have push access
  # as the default remote for circle is read-only
  tag = "#{latest_version}-#{build_version}"
  `git tag -d "#{tag}"`

  add_git_tag tag: tag
  `git remote add http https://github.com/artsy/eigen.git`
  `git push http #{tag}`

  sentry = lambda do |project_slug|
    org_slug = "artsynet"

    sentry_upload_dsym auth_token: ENV['SentryUploadAuthKey'],
                      org_slug: org_slug,
                      project_slug: project_slug

    puts "Uploaded dsym for #{project_slug}"

    sentry_upload_file auth_token: ENV['SentryUploadAuthKey'],
                       org_slug: org_slug,
                       project_slug: project_slug,
                       version: latest_version,
                       dist: build_version,
                       file: "Pods/Emission/Pod/Assets/Emission.js"
    puts "Uploaded Emission.js for #{project_slug}"

    sentry_upload_sourcemap auth_token: ENV['SentryUploadAuthKey'],
                            org_slug: org_slug,
                            project_slug: project_slug,
                            version: latest_version,
                            dist: build_version,
                            sourcemap: "Pods/Emission/Pod/Assets/Emission.js.map",
                            rewrite: true
    puts "Uploaded Emission.js.map for #{project_slug}"

    sentry_create_release auth_token: ENV['SentryUploadAuthKey'],
                          org_slug: org_slug,
                          project_slug: project_slug,
                          version: latest_version, # TODO Does this create versions for the release number?
                          finalize: true
    puts "Created a release for #{project_slug}"
  end

  sentry.call("eigen")
  sentry.call("eigen-staging")

  # Send to the app store
  pilot changelog: beta_readme

  # Let us know everything has finished
  slack message: "There is a new Eigen beta available. Grab it from Testflight on your iOS device.",
        payload: {
          'Version' => latest_version,
          'What\'s new' => beta_readme
        },
        default_payloads: []
end

lane :deploy_latest_to_external do
  readme_yaml = File.read("../CHANGELOG.yml")
  readme_data = YAML.load(readme_yaml)

  latest_version = readme_data["upcoming"]["version"]

  id = CredentialsManager::AppfileConfig.try_fetch_value(:apple_id)
  password = CredentialsManager::AccountManager.new(user: id).password
  Spaceship::Tunes.login(id, password)
  app = Spaceship::Tunes::Application.find APP_ID

  raise "You have no internal builds for #{latest_version}" if app.build_trains.keys.count == 0
  train = app.build_trains[latest_version]

  train.client.submit_testflight_build_for_review!(
    app_id: APP_ID,
    train: train.version_string,
    build_number: latest_version,
    platform: "ios"
  )
end

## We want to have a simpler version of fastlane's match
## this does it in a pretty reasonable amount of code.

lane :setup_for_app_store do
  signing_root = "signing"

  `git clone https://github.com/artsy/mobile_code_signing.git #{signing_root}`

  # prints out the codesigning identities
  system "security find-identity -v -p codesigning"

  # Install the iOS distribution certificate, -A
  system "security import #{signing_root}/ios_distribution.cer  -k ~/Library/Keychains/login.keychain -A"

  # First do project-wide configuration.
  update_project_team(
    path: "Artsy.xcodeproj",
    teamid: "23KMWZ572J"
  )
  update_project_codesigning(
    path: 'Artsy.xcodeproj',
    use_automatic_signing: false
  )

  # Then follow up with target-specific configuration.
  [["eigen", "Artsy"], ["eigen-stickers", "Artsy Stickers"]].each do |app_details|
    app_name = app_details[0]
    app_target = app_details[1]

    # Move our provisioning profile in
    profile_path = File.expand_path("~") + "/Library/MobileDevice/Provisioning Profiles/"
    destination = profile_path + "/" + app_name + ".mobileprovision"
    profile = Dir.glob(signing_root + "/profiles/" + app_name + "/*").first

    update_project_provisioning(
      xcodeproj: 'Artsy.xcodeproj',
      profile: "fastlane/#{profile}",
      target_filter: app_target,
      build_configuration: 'Store'
    )

    # Ensure folder exists
    unless File.directory?(profile_path)
      FileUtils.mkdir_p(profile_path)
    end

    # Migrate it in
    FileUtils.copy profile, destination
    puts "Installed Profile for #{app_target}."
  end

  # Install the key
  key = Dir.glob(signing_root + "/keys/eigen/*").first
  system "security import #{key} -k ~/Library/Keychains/login.keychain -P #{ENV['MATCH_PASSWORD']}  -A "

  # prints out the codesigning identities
  system "security find-identity -v -p codesigning"

  # Clean-up
  `rm -rf #{signing_root}`
end

error do |_, exception|
  File.open(File.join(ENV['CIRCLE_ARTIFACTS'], "fastlane-error.txt"), "w") do |file|
    file.puts("#{exception.message}\n\t#{exception.backtrace.join("\n\t")}")
  end
end
