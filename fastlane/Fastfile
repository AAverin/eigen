require 'yaml'
require 'spaceship'
require 'fileutils'

APP_ID = 'net.artsy.artsy'.freeze

before_all do
  setup_circle_ci
end

lane :ship_beta do
  verify_pod_keys

  readme_yaml = File.read('../CHANGELOG.yml')
  readme_data = YAML.safe_load(readme_yaml)

  latest_version = readme_data['upcoming']['version']

  Spaceship::Tunes.login(ENV['FASTLANE_USERNAME'], ENV['FASTLANE_PASSWORD'])
  app = Spaceship::Tunes::Application.find('net.artsy.artsy')

  # Fail early if we need to make a new version on iTunes
  if app.latest_version.version != latest_version
    raise "You need to create an app version for #{latest_version} in iTunes before deploying"
  end

  upcoming = readme_data['upcoming']
  commit = `git log -n1 --format='%h'`.strip
  notes = upcoming['user_facing'] || []
  beta_readme = "## #{upcoming['version']} - #{commit} \n\n - #{notes.join "\n - "} \n\n"

  # Make sure the stickers app is up to date in it's plist
  `/usr/libexec/PlistBuddy -c "Set CFBundleVersion #{latest_version}" Artsy\ Stickers/Info.plist`

  # Builds the app
  sync_code_signing(app_identifier: ['net.artsy.artsy', 'net.artsy.artsy.Artsy-Stickers'], type: 'appstore')

  disable_automatic_code_signing(
    path: 'Artsy.xcodeproj',
    team_id: '23KMWZ572J',
    targets: ['Artsy'],
    profile_name: 'match AppStore net.artsy.artsy'
  )
  disable_automatic_code_signing(
    path: 'Artsy.xcodeproj',
    team_id: '23KMWZ572J',
    targets: ['Artsy Stickers'],
    profile_name: 'match AppStore net.artsy.artsy.Artsy-Stickers'
  )

  build_ios_app(configuration: 'Store')

  # Do a tag, we use a http git remote so we can have push access
  # as the default remote for circle is read-only
  tag = "#{latest_version}-#{latest_testflight_build_number}"
  `git tag -d "#{tag}"`

  add_git_tag tag: tag
  `git remote add http https://github.com/artsy/eigen.git`
  `git push http #{tag} -f`

  # First make individual dSYM archives available to the sentry-cli tool.
  root = File.expand_path('../..', __FILE__)
  sentry_version = latest_version
  sentry_dist = `/usr/libexec/PlistBuddy -c "print CFBundleVersion" #{File.join(root, 'Artsy/App_Resources/Artsy-Info.plist')}`.strip
  dsym_archive = File.join(root, 'Artsy.app.dSYM.zip')
  dsyms_path = File.join(root, 'dSYMs')
  sh "unzip -d #{dsyms_path} #{dsym_archive}"

  org_slug = 'artsynet'
  sentry_create_release auth_token: ENV['SentryUploadAuthKey'],
                        org_slug: org_slug,
                        project_slug: project_slug,
                        version: sentry_version,
                        finalize: false
  puts "Created a release for #{project_slug}"

  Dir.glob(File.join(dsyms_path, '*.dSYM')).each do |dsym_path|
    # No need to specify `dist` as the build number is encoded in the dSYMâ€™s Info.plist
    sentry_upload_dsym auth_token: ENV['SentryUploadAuthKey'],
                       org_slug: org_slug,
                       project_slug: project_slug,
                       dsym_path: dsym_path
  end

  puts "Uploaded dsym for #{project_slug}"

  sentry_upload_file auth_token: ENV['SentryUploadAuthKey'],
                     org_slug: org_slug,
                     project_slug: project_slug,
                     version: sentry_version,
                     dist: sentry_dist,
                     file: 'Pods/Emission/Pod/Assets/Emission.js'
  puts "Uploaded Emission.js for #{project_slug}"

  sentry_upload_sourcemap auth_token: ENV['SentryUploadAuthKey'],
                          org_slug: org_slug,
                          project_slug: project_slug,
                          version: sentry_version,
                          dist: sentry_dist,
                          sourcemap: 'Pods/Emission/Pod/Assets/Emission.js.map',
                          rewrite: true
  puts "Uploaded Emission.js.map for #{project_slug}"

  sentry.call('eigen')
  sentry.call('eigen-staging')

  # uboMake dSYM archive available in case we failed to put them in the right place in Sentry.
  FileUtils.mv(dsym_archive, ENV['CIRCLE_ARTIFACTS'])

  # # Send to the app store
  # pilot changelog: beta_readme, itc_provider: 'ArtsyInc'
end

error do |_, exception|
  File.open(File.join('.', 'fastlane-error.txt'), 'w') do |file|
    file.puts("#{exception.message}\n\t#{exception.backtrace.join("\n\t")}")
  end
end
